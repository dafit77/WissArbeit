source("Skript1_Aufgabe_2a_iii,iv.R")
source("Skript1_Aufgabe_2a_iii_iv.R")
list.files()
file.exists("Skript1_Aufgabe_2a_iii_iv.R")
source(list.files(pattern = "Skript1_Aufgabe_2a_iii_iv.R$", full.names = TRUE))
source("Skript1_Aufgabe_2a_iii_iv.R", encoding = "UTF-8")
df <- read.csv("titanic.csv", header = FALSE, stringsAsFactors = FALSE)
df
df <- read.csv("titanic.csv", header = TRUE, stringsAsFactors = FALSE)
df
# Wie ist das Alter der Gäste auf der Titanic verteilt gewesen ?
func_spread_summary(df$Age)
# Interquartilsabstand, Spannweite, Varianz und Variationskoeffizient
# Rückgabe erfolgt als Liste der einzelnen Werte
#' Title
#'
#' @param data
#'
#' @return
#' @export
#'
#' @examples
func_spread_summary <- function(data){
if(!is.numeric(data)){
stop(paste("Eingabe ist nicht numerisch, sondern",typeof(data)))
}
func_variationscoeff <- function(data) {
abs_freq <- func_absolute_hkeit(data)
mean_freq <- mean(abs_freq)
sd_freq <- sd(abs_freq)
if (mean_freq == 0) {
return(NA)
}
return(sd_freq / mean_freq)
}
iqr <- func_IQR(data = data)
range <- func_range(data = data)
variance <- var(data, na.rm = TRUE)
var_coef <- func_variationscoeff(data)
return(list("InterquartileRange" = iqr, "Range" = range, "Variance" = variance, "Variationcoefficient" = var_coef))
}
func_spread_summary(df$Age)
# Wie ist das Alter der Gäste auf der Titanic verteilt gewesen ?
func_spread_summary(df$Age)
df$Survived
# Wie ist sind mehr Frauen oder mehr Männer auf dem Schiff gewesen ?
func_categorial_summary(df$Sex)
# Mehr Männer
# Wie sieht die Aufteilung bei den Überlebenden aus ?
func_categorial_summary(df[df$Survived == 1,]$Sex)
# Unterscheidet sich das Alter von Überlebenden und Verstorbenen ?
func_spread_summary(df[df$Survived == 0,]$Age)
func_spread_summary(df[df$Survived == 1,]$Age)
# Sourcing schlägt fehl
file.exists("Skript1_Aufgabe_2a_iii_iv.R")
source("Skript1_Aufgabe_2a_iii_iv.R")
# Sourcing schlägt fehl
file.exists("Skript1_Aufgabe_2a_iii_iv.R")
source("Skript1_Aufgabe_2a_iii_iv.R")
source("Aufgabe_2_Skript_1.R")
Visualisierung(df)
Visualisierung(df, df$Sex, df$Survived, df$Pclass)
Visualisierung(df, "Sex", "Survived", "Pclass")
## für iii
install.packages("dplyr")
install.packages("vcd")
install.packages("psych")
source("Skript 2 Aufgabe 2 a iii, iv")
bivariate_stats <- function(data, var1, var2) {
library(dplyr)
library(vcd)  # Für Assoziationsmaße wie Phi-Koeffizient
library(psych) # Für Punktbiseriale Korrelation
# Prüfen, ob var1 dichotom und var2 metrisch ist
if (length(unique(data[[var1]])) == 2 && is.numeric(data[[var2]])) {
cat("\nPunktbiseriale Korrelation:\n")
point_biserial <- biserial.cor(data[[var2]], as.numeric(as.factor(data[[var1]])))
print(point_biserial)
}
# Kontingenztabelle
cat("\nKontingenztabelle:\n")
tbl <- table(data[[var1]], data[[var2]])
print(tbl)
# Relative Häufigkeiten
cat("\nRelative Häufigkeiten (gesamt):\n")
print(prop.table(tbl))
cat("\nRelative Häufigkeiten (zeilenweise):\n")
print(prop.table(tbl, margin = 1))
cat("\nRelative Häufigkeiten (spaltenweise):\n")
print(prop.table(tbl, margin = 2))
# Phi-Koeffizient (nur für dichotome Variablen)
if (length(unique(data[[var1]])) == 2 && length(unique(data[[var2]])) == 2) {
cat("\nPhi-Koeffizient:\n")
phi_value <- assocstats(tbl)$phi
print(phi_value)
} else {
cat("\nPhi-Koeffizient nicht berechnet: Mindestens eine Variable hat mehr als zwei Kategorien.\n")
}
}
# Beispielaufruf mit Titanic-Daten
# bivariate_stats(titanic_data, "Survived", "Sex")
bivariate_stats(titanic_Berichtigt,"Survived", "Sex")
bivariate_stats(df, "Survived", "Age")
bivariate_stats(df, "Survived", "Age")
?biserial.cor
??biserial.cor
bivariate_statsfkt <- function(data, dichotom_var, metric_var) {
library(dplyr)
library(psych)  # Für Punktbiseriale Korrelation
# Prüfen, ob die Variablen korrekt sind
if (!(dichotom_var %in% names(data)) || !(metric_var %in% names(data))) {
stop("Eine oder beide Variablen existieren nicht im Datensatz.")
}
if (length(unique(data[[dichotom_var]])) != 2) {
stop("Die erste Variable muss dichotom sein (nur zwei eindeutige Werte).")
}
if (!is.numeric(data[[metric_var]])) {
stop("Die zweite Variable muss metrisch sein.")
}
# Punktbiseriale Korrelation berechnen
cat("\nPunktbiseriale Korrelation:\n")
point_biserial <- biserial(data[[metric_var]], as.numeric(as.factor(data[[dichotom_var]])))
print(point_biserial)
}
bivariate_stats(df, "Survived", "Sex")
bivariate_statsfkt(df, "Survived", "Age")
renv::init()
Visualisierung(df, "Sex", "Survived", "Pclass")
bivariate_stats(df, "Survived", "Pclass")
df$Pclass
bivariate_statsfkt(df, "Survived", "Pclass")
# Mehr Männer
# Wie sieht die Aufteilung bei den Überlebenden aus ?
func_categorial_summary(df[df$Survived == 1,]$Sex)
# Indiz für ja, da negative Korrelation zwischen Survived und Pclass
bivariate_statsfkt(df, "Survived", "Age")
source("Test.R")
source("Test.R")
source("Test.R")
("Test.R")
rm(bivariate_stats())
rm(bivariate_stats)
rm(bivariate_statsfkt)
source("Test.R")
rm(bivariate_statsfkt)
rm(bivariate_statsfkt)
source("Test.R")
rm(bivariate_statsfkt)
rm(bivariate_stats)
source("Aufgabe2_3_Skript1.R")
source("Funktionen_Aufgabe2/Aufgabe2_3_Skript1.R")
source("Funktionen_Aufgabe2/Aufgabe_2_Skript_1.R")
source("Funktionen_Aufgabe2/Aufgabe_2_Skript_1.R")
source("Funktionen_Aufgabe2/R_Skript1.R")
source("Funktionen_Aufgabe2/Aufgabe2_3_Skript1.R")
source("Funktionen_Aufgabe2/R_Skript1.R")
source("Funktionen_Aufgabe2/Aufgabe_2_Skript_1.R")
source("Funktionen_Aufgabe2/Aufgabe_2_Skript_1.R")
source("Funktionen_Aufgabe2/R_Skript1.R")
source("Funktionen_Aufgabe2/Aufgabe2_3_Skript1.R")
source("Funktionen_Aufgabe2/Aufgabe_2_Skript_1.R", encoding = "UTF-8")
file.exists("Funktionen_Aufgabe2/Aufgabe_2_Skript_1.R")
file.exists("Funktionen_Aufgabe2/R_Skript1.R")
file.exists("Funktionen_Aufgabe2/Aufgabe2_3_Skript1.R")
df <- read.csv("titanic_Berichtigt.csv", header = TRUE, stringsAsFactors = FALSE)
df
# Wie ist das Alter der Gäste auf der Titanic verteilt gewesen ?
func_spread_summary(df$Age)
func_spread_summary(df[df$Survived == 0,]$Age)
func_spread_summary(df[df$Survived == 1,]$Age)
# sind mehr Frauen oder mehr Männer auf dem Schiff gewesen ?
func_categorial_summary(df$Sex)
# Mehr Männer
# Wie sieht die Aufteilung bei den Überlebenden aus ?
func_categorial_summary(df[df$Survived == 1,]$Sex)
# Mehr Männer
# Wie sieht die Aufteilung bei den Überlebenden aus ?
func_categorial_summary(df[df$Survived == 1,]$Sex)
# Wieviele Tickets jeder Klasse wurden gekauft ?
# Zu Geschlecht und Survived wurden ja schon deskriptive Statistiken berechnet
Visualisierung(df, "Sex", "Survived", "Pclass")
# Wieviele Tickets jeder Klasse wurden gekauft ?
# Zu Geschlecht und Survived wurden ja schon deskriptive Statistiken berechnet
Visualisierung(df, "Sex", "Survived", "Pclass")
bivariate_stats(df, "Survived", "Sex")
# Hypothese: Vor allem die Gäste aus den günstigeren Klassen sind verstorben
bivariate_statsfkt(df, "Survived", "Pclass")
# Indiz für ja, da negative Korrelation zwischen Survived und Pclass
# Frage: Wer hatte eine bessere Überlebenschance Junge oder Alte Menschen ?
bivariate_statsfkt(df, "Survived", "Age")
rm(kategorial_data)
